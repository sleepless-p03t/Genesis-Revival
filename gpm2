#!/bin/bash

root=`pwd`
RPATH="https://raw.githubusercontent.com/sleepless-p03t/Genesis-Revival/master"

function cleanup
{
	local count
	if [ -f ~/.gpm/master.list ]; then
		rm ~/.gpm/master.list
	fi

	if [ -d ~/.gpm/ ]; then
		count=`ls -1 ~/.gpm/internals/*.gmd 2> /dev/null | wc -l`
		if [ $count -ne 0 ]; then rm ~/.gpm/internals/*.gmd; fi
		count=`ls -1 ~/.gpm/plugins/*.gmd 2> /dev/null | wc -l`
		if [ $count -ne 0 ]; then rm ~/.gpm/plugins/*.gmd; fi
		count=`ls -1 ~/.gpm/modules/*.gmd 2> /dev/null | wc -l`
		if [ $count -ne 0 ]; then rm ~/.gpm/modules/*.gmd; fi
		count=`ls -1 ~/.gpm/core/* 2> /dev/null | wc -l`
		if [ $count -ne 0 ]; then rm ~/.gpm/core/*; fi
	fi

	cd $root
}

function _cmp_files
{
	local old new

	old=`md5sum $1 | awk '{ print $1 }'`
	new=`md5sum $2 | awk '{ print $1 }'`

	if [[ "$new" != "$old" ]]; then
		return 1
	else
		return 0
	fi
}

function _download
{
	local _url="$1"
	local _file="$2"

	if ! curl -s -o /dev/null --fail -r 0-0 "$_url"; then
		echo "Could not retrieve remote file"
		exit 2
	else
		curl -s "$_url" -o "$_file"
	fi
}


# download all files
# remove any files that aren't new or modified
function _init
{
	local count

	cd ~/.gpm
	
	mkdir -p update/core
	mkdir -p update/internals
	mkdir -p update/plugins
	mkdir -p update/modules

	_download "$RPATH/master.list" "master.list"
	cd internals

	# internals
	while read -r line; do
		_download "$RPATH/.core/internals/$line" "$line"
	done< <(awk '/INTERNALS_START/{flag=1;next}/INTERNALS_END/{flag=0}flag' ~/.gpm/master.list)
	
	cd ~/.gpm/modules

	# modules
	while read -r line; do
		_download "$RPATH/modules/$line" "$line"
	done< <(awk '/MODULE_START/{flag=1;next}/MODULE_END/{flag=0}flag' ~/.gpm/master.list)

	cd ~/.gpm/plugins
	
	# plugins
	while read -r line; do
		_download "$RPATH/plugins/$line" "$line"
	done< <(awk '/PLUGIN_START/{flag=1;next}/PLUGIN_END/{flag=0}flag' ~/.gpm/master.list)

	cd ~/.gpm/core

	_download "$RPATH/genesis" "genesis"
	_download "$RPATH/mkmod" "mkmod"
	_download "$RPATH/mkplug" "mkplug"

	cd ~/.gpm

	count=`ls -1 ~/.gpm/core/* 2> /dev/null | wc -l`
	if [ $count -ne 0 ]; then
		while read -r line; do
			file=`awk -F'/' '{ print $NF }' <<< $line`
			if _cmp_files "$GENESIS_HOME/$file" "$line"; then
				rm $line
			else
				mv $line update/core/
			fi
		done< <(ls core/*)
	fi

	count=`ls -1 ~/.gpm/internals/* 2> /dev/null | wc -l`
	if [ $count -ne 0 ]; then
		while read -r line; do
			file=`awk -F'/' '{ print $NF }' <<< $line`
			if [ -f $GENESIS_HOME/.core/internals/$file ]; then
				if _cmp_files "$GENESIS_HOME/.core/internals/$file" "$line"; then
					rm $line
				else
					mv $line update/internals/
				fi
			fi
		done< <(ls internals/*)
	fi
	
	count=`ls -1 ~/.gpm/plugins/* 2> /dev/null | wc -l`
	if [ $count -ne 0 ]; then
		while read -r line; do
			file=`awk -F'/' '{ print $NF }' <<< $line`
			if [ -f $GENESIS_HOME/plugins/$file ]; then
				if _cmp_files "$GENESIS_HOME/plugins/$file" "$line"; then
					rm $line
				else
					mv $line update/plugins/
				fi
			fi
		done< <(ls plugins/*)
	fi
	
	count=`ls -1 ~/.gpm/modules/* 2> /dev/null | wc -l`
	if [ $count -ne 0 ]; then
		while read -r line; do
			file=`awk -F'/' '{ print $NF }' <<< $line`
			if [ -f $GENESIS_HOME/modules/$file ]; then
				if _cmp_files "$GENESIS_HOME/modules/$file" "$line"; then
					rm $line
				else
					mv $line update/modules/
				fi
			fi
		done< <(ls modules/*)
	fi
}

### Environment setup ###
function _install
{
	cd

	if ! grep -q '^export GENESIS_HOME=' ~/.bashrc; then
		echo -e "\e[0;37m[\e[1;34mi\e[0;37m] \e[1;37mEnvironmental variable GENESIS_HOME not found.\e[0m"
		echo -e "\e[0;37m[\e[1;34mi\e[0;37m] \e[1;37mAttempting to locate Genesis in $HOME\e[0m"
		if ! find ~/ -type f -name genesis | grep -q -i 'revival'; then
			echo -e "\e[0;37m[\e[1;34mi\e[0;37m] \e[1;37mGenesis does not appear to be downloaded.\e[0m"
			echo -en "\e[1;32mWould you like to download genesis now? [Y/n]: \e[0m"
			read -r ANS
			if [[ $ANS =~ ^[Yy] ]]; then
				_download "$RPATH/Genesis-Revival.tar.bz2" "Genesis-Revival.tar.bz2"
				tar -xjSf Genesis-Revival.tar.bz2
				mv genesis_core Genesis-Revival
				rm Genesis-Revival.tar.bz2
				echo -e "Adding environment variable definition \e[1;34mGENESIS_HOME\e[0m to ~/.bashrc"
				echo "export GENESIS_HOME=\"$HOME/Genesis-Revival\"" >> ~/.bashrc
				source ~/.bashrc
			else
				echo "Aborting."
				exit 1
			fi
		fi
	fi

	if [ ! -d ~/.gpm ]; then
		echo -e "\e[0;37m[\e[1;34mi\e[0;37m] \e[1;37mCreating and populating Genesis Project Manager directory .gpm in $HOME/\e[0m"
		mkdir -p ~/.gpm/internals
		mkdir -p ~/.gpm/plugins
		mkdir -p ~/.gpm/modules
		mkdir -p ~/.gpm/core
	fi
	
	if [ ! -f ~/.gpm/gpm_complete ]; then
		cp $GENESIS_HOME/gpm_complete ~/.gpm/
		source ~/.bashrc
	fi

	if [ ! -f /usr/local/bin/gpm ]; then
		cp $root/$(basename $0) /usr/local/bin/
		chmod +x /usr/local/bin/$(basename $0) 
	fi

	if [ -f ~/.bash_aliases ]; then
		if ! grep -Fxq '^source $HOME/.gpm/gpm_complete' ~/.bash_aliases; then
			echo 'source $HOME/.gpm/gpm_complete' >> ~/.bash_aliases
		fi
	else
		echo 'source $HOME/.gpm/gpm_complete' > ~/.bash_aliases
	fi
}

function _list_internals
{
	cd ~/.gpm
	while read -r line; do
		file=`awk -F'.' '{ print $1 }' <<< $line`
		if [ -f $GENESIS_HOME/.core/internals/$line ]; then
			echo -e "\e[0;37m[\e[1;32m*\e[0;37m] \e[1;36m$file\e[0m"
		else
			echo -e "\e[0;37m[ ] \e[1;36m$file\e[0m"
		fi
	done< <(awk '/INTERNALS_START/{flag=1;next}/INTERNALS_END/{flag=0}flag' master.list)
}

function _list_plugins
{
	cd ~/.gpm
	while read -r line; do
		file=`awk -F'.' '{ print $1 }' <<< $line`
		if [ -f $GENESIS_HOME/plugins/$line ]; then
			echo -e "\e[0;37m[\e[1;32m*\e[0;37m] \e[1;36m$file\e[0m"
		else
			echo -e "\e[0;37m[ ] \e[1;36m$file\e[0m"
		fi
	done< <(awk '/PLUGIN_START/{flag=1;next}/PLUGIN_END/{flag=0}flag' master.list)
}

function _list_modules
{
	cd ~/.gpm
	while read -r line; do
		file=`awk -F'.' '{ print $1 }' <<< $line`
		if [ -f $GENESIS_HOME/modules/$line ]; then
			echo -e "\e[0;37m[\e[1;32m*\e[0;37m] \e[1;36m$file\e[0m"
		else
			echo -e "\e[0;37m[ ] \e[1;36m$file\e[0m"
		fi
	done< <(awk '/MODULE_START/{flag=1;next}/MODULE_END/{flag=0}flag' master.list)
}

success=1
dmissing=()
gmissing=()
function _verify_deps 
{
	local st
	success=1
	dmissing=()
	while read -r line; do
		while read -r pkg; do
			if [ ! -e $pkg ]; then
				st=2
				while [ $st -eq 2 ]; do
					dpkg -s $pkg &> /dev/null
					st=$?
					if [ $st -eq 1 ]; then
						success=0
						dmissing+=( $pkg )
					fi
				done
			fi
		done< <(awk -F':' '{ $1=""; print }' <<< $line | sed 's/^[ \t]*//; s/ //g; s/,/\n/g')
	done< <(tar -xjSf $1.gmd --strip-components=1 $(tar -tjSf $1.gmd | grep '\.info') -O | grep 'Package')
	
	gmissing=()
	while read -r line; do
		while read -r gem; do
			if [ ! -e $gem ]; then
				gem list ^${gem}$ -i > /dev/null
				st=$?
				if [ $st -eq 1 ]; then
					success=0
					gmissing+=( $gem )
				fi
			fi
		done< <(awk -F':' '{ $1=""; print }' <<< $line | sed 's/^[ \t]*//; s/ //g; s/,/\n/g')
	done< <(tar -xjSf $1.gmd --strip-components=1 $(tar -tjSf $1.gmd | grep '\.info') -O | grep 'Gem')
}


function _add_plugin
{
	cd ~/.gpm/plugins
	
	echo -en "\e[0;37m[\e0m"
	echo -en "\e[0;37m ] \e[1;37mInstalling plugin \e[1;36m$1\e[0;37m ...\r"
	if [ ! -f $1.gmd ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[1;37mInstalling plugin \e[1;36m$1 \e[0;31mfailed\e[0m"
	else
		_verify_deps $1
		if [ $success -eq 1 ]; then
			echo -e "\e[0;37m[\e[1;32m+\e[0;37m] \e[1;37mInstalling plugin \e[1;36m$1 \e[0;32msuccess\e[0m"
		else
			echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[1;37mInstalling plugin \e[1;36m$1 \e[0;31mfailed\e[0m"
			if [ ${#dmissing[@]} -ne 0 ]; then
				echo -e "\e[1;31mThe following packages are missing:"
				for i in "${dmissing[@]}"; do
					echo -e "\e[0;31m$i\e[0m"
				done
				echo
			fi
			if [ ${#gmissing[@]} -ne 0 ]; then
				echo -e "\e[1;31mThe following gems are missing:"
				for i in "${gmissing[@]}"; do
					echo -e "\e[0;31m$i\e[0m"
				done
			fi
		fi
	fi

	echo
}

function _remove_plugin
{
	cd $GENESIS_HOME/plugins
	echo -en "\e[0;37m[\e0m"
	echo -en "\e[0;37m ] \e[1;37mRemoving plugin \e[1;36m$1\e[1;37m ...\r"
	if [ ! -f $1.gmd ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[1;37mRemoving plugin \e[1;36m$1 \e[0;31mfailed\e[0m"
	else
		echo -e "\e[0;37m[\e[1;33m-\e[0;37m] \e[1;37mRemoving plugin \e[1;36$1 \e[0;32msuccess\e[0m"
	fi

	echo
}

function _add_module
{
	cd ~/.gpm/modules
	
	echo -en "\e[0;37m[\e0m"
	echo -en "\e[0;37m ] \e[1;37mInstalling module \e[1;36m$1\e[1;37m ...\r"

	if [ ! -f $1.gmd ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[1;37mInstalling module \e[1;36m$1 \e[0;31mfailed\e[0m"
	else
		_verify_deps $1
		if [ $success -eq 1 ]; then
			echo -e "\e[0;37m[\e[1;32m+\e[0;37m] \e[1;37mInstalling module \e[1;36m$1 \e[0;32msuccess\e[0m"
		else
			echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[1;37mInstalling module \e[1;36m$1 \e[0;31mfailed\e[0m"
			if [ ${#dmissing[@]} -gt 0 ]; then
				echo -e "\e[1;31mThe following packages are missing:"
				for i in "${dmissing[@]}"; do
					echo -e "\e[0;31m$i\e[0m"
				done
				echo
			fi
			if [ ${#gmissing[@]} -gt 0 ]; then
				echo -e "\e[1;31mThe following gems are missing:"
				for i in "${gmissing[@]}"; do
					echo -e "\e[0;31m$i\e[0m"
				done
			fi
		fi
	fi

	echo
}

function _remove_module
{
	cd $GENESIS_HOME/modules
	echo -en "\e[0;37m[\e0m"
	echo -en "\e[0;37m ] \e[1;37mRemoving module \e[1;36m$1\e[0;37m ...\r"
	if [ ! -f $1.gmd ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[1;37mRemoving module \e[1;36m$1 \e[0;31mfailed\e[0m"
	else
		echo -e "\e[0;37m[\e[1;33m-\e[0;37m] \e[1;37mRemoving module \e[1;36m$1 \e[0;32msuccess\e[0m"
	fi

	echo
}

# gpm command help
function _gpm_help
{
cat<<EOF
gpm install	install genesis
gpm uninstall	remove genesis
gpm update	update genesis
gpm list all	list all modules and plugins
gpm list plugins	list all plugins
gpm list modules	list all modules
---	---
gpm list_local all	list installed modules and plugins
gpm list_local plugins	list installed plugins
gpm list_local modules	list installed modules
gpm list_remote all	list available modules and plugins
gpm list_remote plugins	list available plugins
gpm list_remote modules	list available modules
gpm add plugin <plugin>	add plugin to genesis
gpm remove plugin <plugin>	remove plugin from genesis
gpm add module <module>	add module to genesis
gpm remove module <module>	remove module from genesis
---	---
gpm help	display this help
EOF
	echo -en "\e[0m"	
}

trap cleanup SIGINT EXIT

#install
_init

###---* SCRIPT START *---###

if [[ "$1" == "help" ]] || [[ "$1" == "install" ]] || [[ "$1" == "uninstall" ]] || [[ "$1" == "update" ]]; then
	if [ ! -z $2 ]; then
		echo -e "\e[0;31mToo many arguments.\e[0m"
		exit 1
	fi
fi

if [ -e $1 ] || [[ "$1" == "help" ]]; then
	echo -e "\e[1;37mUsage:\n\e[0;37m"
	_gpm_help | sed 's/\t/,|,/g' | column -s ',' -t 2> /dev/null
elif [[ "$1" == "install" ]]; then
	if ! grep -q 'GENESIS_HOME' ~/.bashrc; then
		_install
	else
		echo -e "\e[0;37m[\e[1;34mi\e[0;37m] Genesis appears to already be installed. Aborting\e[0m"
		exit 0
	fi
elif [[ "$1" == "add" ]]; then
	if [ -z $2 ] || [ -z $3 ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mMissing arguments for \e[0;33m$@\e[0m"
		echo
		echo -e "\e[1;37mUsage:\n\e[0;37m"
		_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm add' | column -s ',' -t 2> /dev/null
	fi
elif [[ "$1" == "remove" ]]; then
	if [ -z $2 ] || [ -z $3 ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mMissing arguments for \e[0;33m$@\e[0m"
		echo
		echo -e "\e[1;37mUsage:\n\e[0;37m"
		_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm remove' | column -s ',' -t 2> /dev/null
	fi
elif [[ "$1" == "list" ]]; then
	if [ -z $2 ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mMissing arguments for \e[0;33m$@\e[0m"
		echo
		echo -e "\e[1;37mUsage:\n\e[0;37m"
		_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm list' | column -s ',' -t 2> /dev/null
	else
		if [[ "$2" == "all" ]]; then
			echo -e "\e[1;37mPlugins:\e[0m"
			_list_plugins
			echo
			echo -e "\e[1;37mModules:\e[0m"
			_list_modules
		elif [[ "$2" == "modules" ]]; then
			_list_modules
		elif [[ "$2" == "plugins" ]]; then
			_list_plugins
		else
			echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mUnknown option \e[0;33m$2\e[0m"
			echo
			echo -e "\e[1;37mUsage:\n\e[0;37m"
			_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm list' | column -s ',' -t 2> /dev/null
		fi
	fi
elif [[ "$1" == "list_local" ]]; then
	if [ -z $2 ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mMissing arguments for \e[0;33m$@\e[0m"
		echo
		echo -e "\e[1;37mUsage:\n\e[0;37m"
		_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm list_local' | column -s ',' -t 2> /dev/null
	else
		if [[ "$2" == "all" ]]; then
			echo -e "\e[1;37mInstalled plugins:\e[0m"
			_list_plugins | grep -w '*'
			echo
			echo -e "\e[1;37mInstalled modules:\e[0m"
			_list_modules | grep -w '*'
		elif [[ "$2" == "modules" ]]; then
			_list_modules | grep -w '*'
		elif [[ "$2" == "plugins" ]]; then
			_list_plugins | grep -w '*'
		else
			echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mUnknown option \e[0;33m$2\e[0m"
			echo
			echo -e "\e[1;37mUsage:\n\e[0;37m"
			_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm list_local' | column -s ',' -t 2> /dev/null
		fi
	fi
elif [[ "$1" == "list_remote" ]]; then
	if [ -z $2 ]; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mMissing arguments for \e[0;33m$@\e[0m"
		echo
		echo -e "\e[1;37mUsage:\n\e[0;37m"
		_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm list_remote' | column -s ',' -t 2> /dev/null
	else
		if [[ "$2" == "all" ]]; then
			echo -e "\e[1;37mInstalled plugins:\e[0m"
			_list_plugins | grep -w '[ ]'
			echo
			echo -e "\e[1;37mInstalled modules:\e[0m"
			_list_modules | grep -w '[ ]'
		elif [[ "$2" == "modules" ]]; then
			_list_modules | grep -w '[ ]'
		elif [[ "$2" == "plugins" ]]; then
			_list_plugins | grep -w '[ ]'
		else
			echo -e "\e[0;37m[\e[1;31m!\e[0;37m] \e[0;31mUnknown option \e[0;33m$2\e[0m"
			echo
			echo -e "\e[1;37mUsage:\n\e[0;37m"
			_gpm_help | sed 's/\t/,|,/g' | grep -w 'gpm list_local' | column -s ',' -t 2> /dev/null
		fi
	fi
fi
